//======== Copyright (c) 2008-2015, Filip Vaverka, All rights reserved. ======//
//
// Purpose:     OpenCL and wrapper error codes
//
// $NoKeywords: $OpenCLStub $error_codes.cpp
// $Date:       $2015-11-18
//============================================================================//

#include "error_codes.h"

#include <stdlib.h>
#include <math.h>
#include <utility>

#include <CL/cl.h>

#define ERR_CODE_STRING_PAIR(code) std::make_pair(code, #code)

static std::pair<int, const char *> sc_pszWrapperErrorCodes[] = {
    ERR_CODE_STRING_PAIR(ERR_SUCCESS),
    ERR_CODE_STRING_PAIR(ERR_GENERIC_ERROR),
    ERR_CODE_STRING_PAIR(ERR_GET_PLATFORMS_FAILED),
    ERR_CODE_STRING_PAIR(ERR_OCL_CONTEXT_CREATE_FAILED),
    ERR_CODE_STRING_PAIR(ERR_OCL_GET_DEVICES_FAILED),
    ERR_CODE_STRING_PAIR(ERR_PROGRAM_FILE_OPEN_FAILED),
    ERR_CODE_STRING_PAIR(ERR_OCL_PROGRAM_CREATION_FAILED),
    ERR_CODE_STRING_PAIR(ERR_OCL_PROGRAM_BUILD_FAILED),
    ERR_CODE_STRING_PAIR(ERR_OCL_CMDQUEUE_INIT_FAILED),
    ERR_CODE_STRING_PAIR(ERR_PROGRAM_NOT_LOADED),
    ERR_CODE_STRING_PAIR(ERR_KERNEL_CREATION_FAILED),
    ERR_CODE_STRING_PAIR(ERR_BUFFER_CREATION_FAILED),
    ERR_CODE_STRING_PAIR(ERR_BUFFER_WRITE_FAILED),
    ERR_CODE_STRING_PAIR(ERR_BUFFER_READ_FAILED),
    ERR_CODE_STRING_PAIR(ERR_KERNEL_ARGSET_FAILED),
    ERR_CODE_STRING_PAIR(ERR_KERNEL_RUN_FAILED),
    ERR_CODE_STRING_PAIR(ERR_BUFFER_FILL_FAILED),
    ERR_CODE_STRING_PAIR(ERR_BUFFER_MAP_FAILED),
    ERR_CODE_STRING_PAIR(ERR_BUFFER_UNMAP_FAILED),
    ERR_CODE_STRING_PAIR(ERR_INVALID_PARAM),
    ERR_CODE_STRING_PAIR(ERR_FILE_OPEN_FAILED),

    std::make_pair(ERR_CODE_LAST, (const char *)NULL)
};

static std::pair<int, const char *> sc_pszOpenCLErrorCodes[] = {
    ERR_CODE_STRING_PAIR(CL_SUCCESS),
    ERR_CODE_STRING_PAIR(CL_DEVICE_NOT_FOUND),
    ERR_CODE_STRING_PAIR(CL_DEVICE_NOT_AVAILABLE),
    ERR_CODE_STRING_PAIR(CL_COMPILER_NOT_AVAILABLE),
    ERR_CODE_STRING_PAIR(CL_MEM_OBJECT_ALLOCATION_FAILURE),
    ERR_CODE_STRING_PAIR(CL_OUT_OF_RESOURCES),
    ERR_CODE_STRING_PAIR(CL_OUT_OF_HOST_MEMORY),
    ERR_CODE_STRING_PAIR(CL_PROFILING_INFO_NOT_AVAILABLE),
    ERR_CODE_STRING_PAIR(CL_MEM_COPY_OVERLAP),
    ERR_CODE_STRING_PAIR(CL_IMAGE_FORMAT_MISMATCH),
    ERR_CODE_STRING_PAIR(CL_IMAGE_FORMAT_NOT_SUPPORTED),
    ERR_CODE_STRING_PAIR(CL_BUILD_PROGRAM_FAILURE),
    ERR_CODE_STRING_PAIR(CL_MAP_FAILURE),
    ERR_CODE_STRING_PAIR(CL_MISALIGNED_SUB_BUFFER_OFFSET),
    ERR_CODE_STRING_PAIR(CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST),
    ERR_CODE_STRING_PAIR(CL_COMPILE_PROGRAM_FAILURE),
    ERR_CODE_STRING_PAIR(CL_LINKER_NOT_AVAILABLE),
    ERR_CODE_STRING_PAIR(CL_LINK_PROGRAM_FAILURE),
    ERR_CODE_STRING_PAIR(CL_DEVICE_PARTITION_FAILED),
    ERR_CODE_STRING_PAIR(CL_KERNEL_ARG_INFO_NOT_AVAILABLE),

    ERR_CODE_STRING_PAIR(CL_INVALID_VALUE),
    ERR_CODE_STRING_PAIR(CL_INVALID_DEVICE_TYPE),
    ERR_CODE_STRING_PAIR(CL_INVALID_PLATFORM),
    ERR_CODE_STRING_PAIR(CL_INVALID_DEVICE),
    ERR_CODE_STRING_PAIR(CL_INVALID_CONTEXT),
    ERR_CODE_STRING_PAIR(CL_INVALID_QUEUE_PROPERTIES),
    ERR_CODE_STRING_PAIR(CL_INVALID_COMMAND_QUEUE),
    ERR_CODE_STRING_PAIR(CL_INVALID_HOST_PTR),
    ERR_CODE_STRING_PAIR(CL_INVALID_MEM_OBJECT),
    ERR_CODE_STRING_PAIR(CL_INVALID_IMAGE_FORMAT_DESCRIPTOR),
    ERR_CODE_STRING_PAIR(CL_INVALID_IMAGE_SIZE),
    ERR_CODE_STRING_PAIR(CL_INVALID_SAMPLER),
    ERR_CODE_STRING_PAIR(CL_INVALID_BINARY),
    ERR_CODE_STRING_PAIR(CL_INVALID_BUILD_OPTIONS),
    ERR_CODE_STRING_PAIR(CL_INVALID_PROGRAM),
    ERR_CODE_STRING_PAIR(CL_INVALID_PROGRAM_EXECUTABLE),
    ERR_CODE_STRING_PAIR(CL_INVALID_KERNEL_NAME),
    ERR_CODE_STRING_PAIR(CL_INVALID_KERNEL_DEFINITION),
    ERR_CODE_STRING_PAIR(CL_INVALID_KERNEL),
    ERR_CODE_STRING_PAIR(CL_INVALID_ARG_INDEX),
    ERR_CODE_STRING_PAIR(CL_INVALID_ARG_VALUE),
    ERR_CODE_STRING_PAIR(CL_INVALID_ARG_SIZE),
    ERR_CODE_STRING_PAIR(CL_INVALID_KERNEL_ARGS),
    ERR_CODE_STRING_PAIR(CL_INVALID_WORK_DIMENSION),
    ERR_CODE_STRING_PAIR(CL_INVALID_WORK_GROUP_SIZE),
    ERR_CODE_STRING_PAIR(CL_INVALID_WORK_ITEM_SIZE),
    ERR_CODE_STRING_PAIR(CL_INVALID_GLOBAL_OFFSET),
    ERR_CODE_STRING_PAIR(CL_INVALID_EVENT_WAIT_LIST),
    ERR_CODE_STRING_PAIR(CL_INVALID_EVENT),
    ERR_CODE_STRING_PAIR(CL_INVALID_OPERATION),
    ERR_CODE_STRING_PAIR(CL_INVALID_GL_OBJECT),
    ERR_CODE_STRING_PAIR(CL_INVALID_BUFFER_SIZE),
    ERR_CODE_STRING_PAIR(CL_INVALID_MIP_LEVEL),
    ERR_CODE_STRING_PAIR(CL_INVALID_GLOBAL_WORK_SIZE),
    ERR_CODE_STRING_PAIR(CL_INVALID_PROPERTY),
    ERR_CODE_STRING_PAIR(CL_INVALID_IMAGE_DESCRIPTOR),
    ERR_CODE_STRING_PAIR(CL_INVALID_COMPILER_OPTIONS),
    ERR_CODE_STRING_PAIR(CL_INVALID_LINKER_OPTIONS),
    ERR_CODE_STRING_PAIR(CL_INVALID_DEVICE_PARTITION_COUNT),

    std::make_pair(0xFFFFFFFF, (const char *)NULL)
};

const char *WrapperErrorCodeToString(int errorCode)
{
    for(size_t i = 0; sc_pszWrapperErrorCodes[i].second != NULL; ++i)
    {
        if(sc_pszWrapperErrorCodes[i].first == errorCode)
            return sc_pszWrapperErrorCodes[i].second;
    }

    return "ERR_UNKNOWN_ERR_CODE";
}

const char *OpenCLErrorCodeToString(int errorCode)
{
    for(size_t i = 0; sc_pszOpenCLErrorCodes[i].second != NULL; ++i)
    {
        if(sc_pszOpenCLErrorCodes[i].first == errorCode)
            return sc_pszOpenCLErrorCodes[i].second;
    }

    return "ERR_UNKNOWN_CL_ERR_CODE";
}
